<script src="https://cdn.jsdelivr.net/npm/i18next@21.6.10/i18next.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery-i18next@1.2.1/jquery-i18next.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/i18next-browser-languagedetector@6.1.3/i18nextBrowserLanguageDetector.min.js"></script>

<script src="public/js/i18n.js"></script>

<script src="https://unpkg.com/cronstrue@2.11.0/dist/cronstrue.min.js" async></script>
<script src="https://unpkg.com/cronstrue@2.11.0/dist/cronstrue-i18n.min.js" async></script>

<script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>

<nav class="navbar navbar-expand-lg bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="#" data-i18n="navbar.title"></a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="nav navbar-right" id="navbarSupportedContent" role="search">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fa-solid fa-language"></i>
                    </a>
                    <ul class="dropdown-menu" id="i18n-languages">
                    </ul>
                </li>
            </ul>
            <form class="d-flex" action="/logout" method="POST">
                <button class="btn btn-outline-success" type="submit"><i class="fa-solid fa-arrow-right-from-bracket"></i> <span data-i18n="navbar.logout"></span></button>
            </form>
        </div>
    </div>
</nav>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A==" crossorigin="anonymous" referrerpolicy="no-referrer" />

<style>
    #refresh-files {
        transition: transform .7s ease-in-out;
    }
    #refresh-files:hover {
        transform: rotate(360deg);
    }
    .loader {
        width: 48px;
        height: 48px;
        border: 5px solid rgb(77, 77, 77);
        border-bottom-color: transparent;
        border-radius: 50%;
        display: inline-block;
        box-sizing: border-box;
        animation: rotation 1s linear infinite;
        }

        @keyframes rotation {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    } 
</style>

<div class="container" style="margin-bottom: 2em;">
    <h3 style="margin-top: 3rem;" data-i18n="dashboard"></h3>
    <h4 style="margin-top: 2rem;"><span data-i18n="files"></span> <i class="fa-solid fa-arrows-rotate" id="refresh-files"></i></h4>
    <div id="files">
    </div>

    <h4 style="margin-top: 2rem;" data-i18n="configuration"></h4>
    <table class="table table-sm table-hover table-striped">
        <thead>
            <tr>
                <th scope="col" data-i18n="key"></th>
                <th scope="col" data-i18n="value"></th>
            </tr>
        </thead>
        <tbody id="config-table-body">
        </tbody>
    </table>
    <button type="button" class="btn btn-success" id="saveConfig"><i class="fa-regular fa-floppy-disk"></i> <span data-i18n="save"></span></button>
</div>
<!-- Modal -->
<div class="modal fade" id="fileContentModal" tabindex="-1" aria-labelledby="fileContentModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="fileContentModalLabel"></h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body font-monospace" id="fileContentModalBody">
        ...
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-i18n="close"></button>
      </div>
    </div>
  </div>
</div>
<script>
    function formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';

        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

        const i = Math.floor(Math.log(bytes) / Math.log(k));

        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }
    function getIconForMimeType(mimeType) {
        if(mimeType == "text/csv") {
            return '<i class="fa-solid fa-file-csv"></i>';
        } else {
            return '<i class="fa-solid fa-file"></i>';
        }
    }

    function cronJobPatternToString(pattern) {

    }


    var allowedCalendarIds = [];

    function getCalendarIdsAndNames() {
        $.get("/getCalendars")
            .done(function (data) {
                var calendarIdsAndNames = data;
                var calendarCheckBoxTemplate = '<div class="form-group"><input class="form-check-input calendarIdInput" type="checkbox" id="calendarId-##ID##" ##CHECKED##> <label class="form-check-label" for="calendarId-##ID##">##LABEL## <span style="color: #bbb;">(ID: ##ID##)</span></label></div>';
                
                var tmp = '';
                calendarIdsAndNames.forEach(calendarIdAndName => {
                    var checkboxTmp = calendarCheckBoxTemplate
                        .replace(/##ID##/g, calendarIdAndName.id)
                        .replace(/##LABEL##/g, calendarIdAndName.name);
                    var selected = false;
                    allowedCalendarIds.forEach(entry => {
                        if(entry == calendarIdAndName.id) {
                            selected = true;
                        }
                    });
                    if(selected) {
                        checkboxTmp = checkboxTmp.replace('##CHECKED##','checked="checked"');
                    } else {
                        checkboxTmp = checkboxTmp.replace('##CHECKED##','');
                    }
                    tmp += checkboxTmp;
                });
                $('#calendarIds').empty();
                $('#calendarIds').append(tmp);
            })
            .fail(function (error) {
                console.log(error);
            });
    }

    var groupExportTag;
    var personExportTag;

    function getTagIdsAndNames() {
        $.get("/getTags")
            .done(function (data) {
                var tagIdsAndNames = data;
                var tagRadioButtonTemplate = '<div class="form-group"><input class="form-check-input ##RADIO_GROUP##" type="radio" name="##RADIO_GROUP##" id="##ID##" data-name="##LABEL##" ##CHECKED##> <label class="form-check-label" for="##ID##">##LABEL## <span style="color: #bbb;">(ID: ##ID_ONLY##)</span></label></div>';
                
                var tmpPersons = '';
                var tmpGroups = '';
                tagIdsAndNames.forEach(tagIdAndName => {
                    var radioButtonPersonsTmp = tagRadioButtonTemplate
                        .replace(/##ID##/g, 'person-tag-'+tagIdAndName.id)
                        .replace(/##ID_ONLY##/g, tagIdAndName.id)
                        .replace(/##LABEL##/g, tagIdAndName.name)
                        .replace(/##RADIO_GROUP##/g, 'persons-to-export-tag-radio');
                    var radioButtonGroupsTmp = tagRadioButtonTemplate
                        .replace(/##ID##/g, 'group-tag-'+tagIdAndName.id)
                        .replace(/##ID_ONLY##/g, tagIdAndName.id)
                        .replace(/##LABEL##/g, tagIdAndName.name)
                        .replace(/##RADIO_GROUP##/g, 'groups-to-export-tag-radio');

                    if(personExportTag == tagIdAndName.name) {
                        radioButtonPersonsTmp = radioButtonPersonsTmp.replace('##CHECKED##','checked="checked"');
                    } else {
                        radioButtonPersonsTmp = radioButtonPersonsTmp.replace('##CHECKED##','');
                    }
                    if(groupExportTag == tagIdAndName.name) {
                        radioButtonGroupsTmp = radioButtonGroupsTmp.replace('##CHECKED##','checked="checked"');
                    } else {
                        radioButtonGroupsTmp = radioButtonGroupsTmp.replace('##CHECKED##','');
                    }
                    tmpPersons += radioButtonPersonsTmp;
                    tmpGroups += radioButtonGroupsTmp;
                });

                $('#tags-groupsToExport').empty();
                $('#tags-groupsToExport').append(tmpGroups);

                $('#tags-personsToExport').empty();
                $('#tags-personsToExport').append(tmpPersons);
            })
            .fail(function (error) {
                console.log(error);
            });
    }

    function saveConfig() {
        var newConfig = {
            "churchtools": {
                "url": $('#churchtools-url').val(),
                "username": $('#churchtools-username').val(),
                "password": $('#churchtools-password').val().trim().length > 0 ? $('#churchtools-password').val() : '',
            },
            "storage": {
                "path": $('#storage-path').val(),
                "groupsData": $('#storage-groupsData').val(),
                "contactPersonsData": $('#storage-contactPersonsData').val(),
                "appointmentData": $('#storage-appointmentData').val(),
                "mimeTypes" : [ ]
            }
        };
        if($('#outputCsvCheckBox').is(':checked')) {
            newConfig.storage.mimeTypes.push('text/csv');
        } 
        if($('#outputJsonCheckBox').is(':checked')) {
            newConfig.storage.mimeTypes.push('application/json');
        } 

        newConfig.calendar = {};
        newConfig.calendar.allowedCalendarIds = [];
        $('.calendarIdInput').each((index, element) => {
            if($(element).is(':checked')) {
                var id = $(element).attr('id').replace('calendarId-', '');
                newConfig.calendar.allowedCalendarIds.push(id);
            }
        })

        newConfig.tags = {};
        newConfig.tags.groupsToExport = $( ".groups-to-export-tag-radio:checked" ).attr('data-name');
        newConfig.tags.personsToExport = $( ".persons-to-export-tag-radio:checked" ).attr('data-name');

        newConfig.logging = {};
        newConfig.logging.level = $( "#logLevelSelect option:selected" ).attr('value');        

        newConfig.cronJob = {};
        newConfig.cronJob.pattern = "00 00 23 * * *";

        $.ajax({
            url: "/updateConfig", 
            data: JSON.stringify(newConfig), 
            contentType: 'application/json',
            type: 'POST',
            success: () => {
                 location.reload();
            },
            error: (xhr, textStatus, errorThrown) =>{
                console.log(textStatus);
                console.log(errorThrown);
            }
            });
    }

    $(document).ready(function () {
        $('#refresh-files').click(function() {
            $.get("/store")
                .done(function () {
                    location.reload();
                })
                .fail(function (error) {
                    console.log(error);
                });
        });

        $('#saveConfig').click(saveConfig);

        getCalendarIdsAndNames();
        getTagIdsAndNames();

        $.get("/status")
            .done(function (data) {
                data.files.forEach(file => {
                    var lastChangeDate;
                    if(file.exists == false) {
                        file.stats = {};
                        file.stats.mtime = '-'
                        file.stats.size = 0;
                        lastChangeDate = '-';
                    } else {
                        lastChangeDate = moment(file.stats.mtime, 'YYYY-MM-DDTHH:mm:ss.SSSZ').format('DD.MM.YYYY HH:mm:ss');
                    }

                    var entryTmp = 
                    `<div class="card" style="margin-bottom:1em;">`+
                        `<h5 class="card-header">${file.filename}</h5>`+
                        `<div class="card-body">`+
                            `<!--<h5 class="card-title">${file.filename}</h5>-->`+
                            `<p class="card-text"><span data-i18n="lastChangeDate"></span>: ${lastChangeDate}</p>`+
                            `<p class="card-text">${formatBytes(file.stats.size)} ${getIconForMimeType(file.mimeType)}</p>`+
                            `<a href="#" class="btn ${file.exists == false ? 'btn-outline-secondary' : 'btn-primary'} ${file.exists == true ? '': 'disabled'} view-file-button" data-filename="${file.filename}" data-i18n="view_file"></a>`+
                        `</div>`+
                    `</div>`;
                    $('#files').append(entryTmp);
                    
                });
                $('.view-file-button').click(function(event) {
                    var filename = $(this).data('filename');
                     $.get("/getFile?filename="+filename)
                        .done(function (file) {
                            var content = file.content;
                            if(filename.endsWith('json')) {
                                content = JSON.stringify(JSON.parse(content), null, 4);
                            }
                            content = content.replace(/\n/g,'<br>');
                            $('#fileContentModalLabel').empty();
                            $('#fileContentModalLabel').append(filename);
                            $('#fileContentModalBody').empty();
                            $('#fileContentModalBody').append(content);
                            $('#fileContentModal').modal('show');
                        })
                        .fail(function (error) {
                            console.log(error);
                        });
                });

                var inputRowTemplate = `<tr><td data-i18n="##key##"></td><td><div class="input-group input-group-sm input-inline"><input id="##id##" type="text" class="form-control" value="##value##"></div></td></tr>`;
                
                $('#config-table-body').append(inputRowTemplate
                    .replace('##key##','config.churchtools.url')
                    .replace('##id##','churchtools-url')
                    .replace('##value##',data.config.churchtools.url));

                $('#config-table-body').append(inputRowTemplate
                    .replace('##key##','config.churchtools.username')
                    .replace('##id##','churchtools-username')
                    .replace('##value##',data.config.churchtools.username));

                $('#config-table-body').append(`<tr><td data-i18n="config.churchtools.password"></td><td><div class="input-group input-group-sm input-inline"><input id="churchtools-password" type="password" class="form-control" placeholder="Enter the new password here"></div></td></tr>`);

                $('#config-table-body').append(inputRowTemplate
                    .replace('##key##','config.storage.groupsData')
                    .replace('##id##','storage-groupsData')
                    .replace('##value##',data.config.storage.groupsData));

                $('#config-table-body').append(inputRowTemplate
                    .replace('##key##','config.storage.contactPersonsData')
                    .replace('##id##','storage-contactPersonsData')
                    .replace('##value##',data.config.storage.contactPersonsData));

                $('#config-table-body').append(inputRowTemplate
                    .replace('##key##','config.storage.appointmentData')
                    .replace('##id##','storage-appointmentData')
                    .replace('##value##',data.config.storage.appointmentData));

                var tmp = '';
                if(data.config.storage.mimeTypes.includes('text/csv')) {
                    tmp = 'checked="checked"';
                }
                var rowTmp = `<tr><td data-i18n="config.storage.csv"></td><td><input class="form-check-input" type="checkbox" id="outputCsvCheckBox" ${tmp}></td></tr>`;
                $('#config-table-body').append(rowTmp);
                
                tmp = '';
                if(data.config.storage.mimeTypes.includes('application/json')) {
                    tmp = 'checked="checked"';
                }
                rowTmp = `<tr><td data-i18n="config.storage.json"></td><td><input class="form-check-input" type="checkbox" id="outputJsonCheckBox" ${tmp}></td></tr>`;
                $('#config-table-body').append(rowTmp);
                
                allowedCalendarIds = data.config.calendar.allowedCalendarIds;

                rowTmp = `<tr><td data-i18n="config.allowedCalendarIds"></td><td id="calendarIds"><span class="loader"></span></td></tr>`;
                $('#config-table-body').append(rowTmp);

                groupExportTag = data.config.tags.groupsToExport;
                $('#config-table-body').append('<tr><td data-i18n="config.tags.groupsToExport"></td><td id="tags-groupsToExport"><span class="loader"></span></td></tr>');

                personExportTag = data.config.tags.personsToExport;
                $('#config-table-body').append('<tr><td data-i18n="config.tags.personsToExport"></td><td id="tags-personsToExport"><span class="loader"></span></td></tr>');


                var rowTmp = '<tr><td data-i18n="config.logging.level"></td><td><div class="input-group input-group-sm input-inline"><select class="from-select" id="logLevelSelect">'+
                    `<option value="debug" ${data.config.logging.level == 'debug' ? 'selected' : ''}>Debug</option>`+
                    `<option value="info" ${data.config.logging.level == 'info' ? 'selected' : ''}>Info</option>`+
                    `<option value="error" ${data.config.logging.level == 'error' ? 'selected' : ''}>Error</option>`+
                    `<option value="none" ${data.config.logging.level == 'none' ? 'selected' : ''}>None</option>`+
                    `</select></div></td></tr>`;
                $('#config-table-body').append(rowTmp);

                $('#config-table-body').append(`<tr><td data-i18n="config.cronJob"></td><td><div class="input-group input-group-sm input-inline">`+
                    `<input id="cronJob-pattern" type="text" class="form-control" value="${data.config.cronJob.pattern}">`+
                    `<div class="input-group-append"><a href="https://github.com/node-cron/node-cron#cron-syntax" target="_blank" class="btn btn-outline-secondary" >Help</a></div></div>`+
                    `<div><span id="cronJob-pattern-explanation"></span></div></td></tr>`);

                $('#cronJob-pattern').change(()=> {
                    $('#cronJob-pattern-explanation').empty();
                    // TODO: make locale dynamic
                    $('#cronJob-pattern-explanation').append(cronstrue.toString($('#cronJob-pattern').val(), { use24HourTimeFormat: true, locale: "de" }));
                });

                i18next.changeLanguage("de", () => {
                    rerender();
                });
            })
            .fail(function (error) {
                console.log(error);
            });
    });
</script>
