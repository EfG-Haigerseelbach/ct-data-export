<script src="https://cdn.jsdelivr.net/npm/i18next@21.6.10/i18next.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/jquery-i18next@1.2.1/jquery-i18next.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/i18next-browser-languagedetector@6.1.3/i18nextBrowserLanguageDetector.min.js"></script>

<script src="public/js/i18n.js"></script>
<script src="public/js/validation.js"></script>

<!-- cronstrue - parses a cron expression and outputs a human readable description -->
<script src="/cronstrue/cronstrue.min.js"></script>
<script src="/cronstrue/cronstrue-i18n.min.js"></script>
<!-- cronstrue -->


<script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>

<nav class="navbar navbar-expand-lg bg-light fixed-top">
    <div class="container-fluid">
        <a class="navbar-brand" href="#" data-i18n="navbar.title"></a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="nav navbar-right" id="navbarSupportedContent" role="search">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fa-solid fa-language"></i>
                    </a>
                    <ul class="dropdown-menu" id="i18n-languages">
                    </ul>
                </li>
            </ul>
            <form class="d-flex" action="/logout" method="POST">
                <button class="btn btn-outline-success" type="submit"><i class="fa-solid fa-arrow-right-from-bracket"></i> <span data-i18n="navbar.logout"></span></button>
            </form>
        </div>
    </div>
</nav>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<style>
    #refresh-files {
        transition: transform .7s ease-in-out;
    }
    #refresh-files-button:hover > #refresh-files {
        transform: rotate(360deg);
    }
    #trigger-hooks {
        transition: transform .7s ease-in-out;
    }
    #trigger-hooks-button:hover > #trigger-hooks {
        transform: rotate(360deg);
    }
    .help-input-group:hover {
        filter: brightness(85%);
    }
    .loader-0 {
        width: 48px;
        height: 48px;
        border: 5px solid rgb(77, 77, 77);
        border-bottom-color: transparent;
        border-radius: 50%;
        display: inline-block;
        box-sizing: border-box;
        animation: rotation 1s linear infinite;
        }

        @keyframes rotation {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    } 
    @keyframes spinner {
        to {transform: rotate(360deg);}
    }
 
    .spinner:before {
        content: '';
        box-sizing: border-box;
        position: absolute;
        float: left;
        margin-top: 5px;
        margin-left: 1em;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        border: 2px solid #ccc;
        border-top-color: #000;
        animation: spinner .6s linear infinite;
    }
    /*
     * Enable wrapping of long text inside a pre-tag
     */
    pre {
        overflow-x: auto;
        white-space: pre-wrap;
        white-space: -moz-pre-wrap;
        white-space: -pre-wrap;
        white-space: -o-pre-wrap;
        word-wrap: break-word;
    }

    .input-error {
        color: #dc3545 !important;
    }
</style>

<div class="container" style="margin-bottom: 2em;">
    <h3 style="margin-top: 7rem;" data-i18n="dashboard"></h3>
    

    <button 
        type="button" 
        id="refresh-button"
        class="btn btn-outline-secondary btn-sm">
        <span data-i18n="refresh">Refresh</span> <i class="fa-solid fa-arrows-rotate"></i>
    </button>

    <hr style="margin-top: 1.8em;">

    <h4 style="margin-top: 2rem; margin-bottom: 1em;"><span data-i18n="files_export"></span> <i class="fa-solid fa-file-import"></i></h4>
    
    <button 
        type="button" 
        id="refresh-files-button"
        class="btn btn-outline-secondary btn-sm">
        <span data-i18n="export"></span> <i class="fa-solid fa-file-import" id="refresh-files"></i>
    </button>
    <span class="spinner" id="refresh-files-spinner" style="display: none;"></span>
    
    <div id="files" class="d-flex flex-wrap" style="margin-top: 1em;">
    </div>

    <hr style="margin-top: 1.8em;">

    <h4 style="margin-top: 2rem; margin-bottom: 1em;"><span data-i18n="hooks"></span> <i class="fa-solid fa-arrows-turn-right"></i></h4>
    <button 
        type="button" 
        id="trigger-hooks-button"
        class="btn btn-outline-secondary btn-sm">
        <span data-i18n="trigger_hooks"></span> <i class="fa-solid fa-play" id="trigger-hooks"></i>
    </button>
    <span class="spinner" id="trigger-hooks-spinner" style="display: none;"></span>
    <div class="accordion" id="hooks" style="margin-top: 1em;">
    </div>

    <hr style="margin-top: 2.8em;">

    <h4 style="margin-top: 2rem;">
        <span data-i18n="configuration"></span> <i class="fa-solid fa-gears"></i>
        <button type="button" class="btn btn-outline-secondary btn-sm" data-bs-toggle="button" id="display-explanation-button" style="float: right;">
            <span data-i18n="help"></span> <i class="fa-regular fa-circle-question"></i>
        </button>
    </h4>
    <div id="config-test"></div>
    <button type="button" class="btn btn-sm btn-success" id="saveConfig" style="margin-top: 1em;"><span data-i18n="save_config"></span> <i class="fa-regular fa-floppy-disk"></i></button>
</div>
<!-- Modal -->
<div class="modal fade" id="fileContentModal" tabindex="-1" aria-labelledby="fileContentModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="fileContentModalLabel"></h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body font-monospace" id="fileContentModalBody">
        ...
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-i18n="close"></button>
      </div>
    </div>
  </div>
</div>
<script>
    function formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';

        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

        const i = Math.floor(Math.log(bytes) / Math.log(k));

        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }
    function getIconForMimeType(mimeType) {
        return '<i class="fa-solid fa-file"></i>';
    }

    var groupExportTag;
    var personExportTag;

    function getTagIdsAndNames() {
        $.get("/getTags")
            .done(function (data) {
                var tagIdsAndNames = data;
                var tagRadioButtonTemplate = '<div class="form-group"><input class="form-check-input ##RADIO_GROUP##" type="radio" name="##RADIO_GROUP##" id="##ID##" data-name="##LABEL##" ##CHECKED##> <label class="form-check-label" for="##ID##">##LABEL## <span style="color: #bbb;">(ID: ##ID_ONLY##)</span></label></div>';
                
                var tmpPersons = '';
                var tmpGroups = '';
                tagIdsAndNames.forEach(tagIdAndName => {
                    var radioButtonPersonsTmp = tagRadioButtonTemplate
                        .replace(/##ID##/g, 'person-tag-'+tagIdAndName.id)
                        .replace(/##ID_ONLY##/g, tagIdAndName.id)
                        .replace(/##LABEL##/g, tagIdAndName.name)
                        .replace(/##RADIO_GROUP##/g, 'persons-to-export-tag-radio');
                    var radioButtonGroupsTmp = tagRadioButtonTemplate
                        .replace(/##ID##/g, 'group-tag-'+tagIdAndName.id)
                        .replace(/##ID_ONLY##/g, tagIdAndName.id)
                        .replace(/##LABEL##/g, tagIdAndName.name)
                        .replace(/##RADIO_GROUP##/g, 'groups-to-export-tag-radio');

                    if(personExportTag == tagIdAndName.name) {
                        radioButtonPersonsTmp = radioButtonPersonsTmp.replace('##CHECKED##','checked="checked"');
                    } else {
                        radioButtonPersonsTmp = radioButtonPersonsTmp.replace('##CHECKED##','');
                    }
                    if(groupExportTag == tagIdAndName.name) {
                        radioButtonGroupsTmp = radioButtonGroupsTmp.replace('##CHECKED##','checked="checked"');
                    } else {
                        radioButtonGroupsTmp = radioButtonGroupsTmp.replace('##CHECKED##','');
                    }
                    tmpPersons += radioButtonPersonsTmp;
                    tmpGroups += radioButtonGroupsTmp;
                });

                $('#tags-groupsToExport').empty();
                $('#tags-groupsToExport').append(tmpGroups);

                $('#tags-personsToExport').empty();
                $('#tags-personsToExport').append(tmpPersons);
            })
            .fail(function (error) {
                console.log(error);
            });
    }

    function saveConfig() {
        var newConfig = {
            "churchtools": {
                "url": $('#config\\.churchtools\\.url').val(),
                "username": $('#config\\.churchtools\\.username').val(),
                "password": $('#config\\.churchtools\\.password').val().trim().length > 0 ? $('#config\\.churchtools\\.password').val() : '',
            },
            "storage": {
                "output": $('#config\\.storage\\.json').is(':checked'),
                "groupsData": $('#config\\.storage\\.groupsData').val(),
                "contactPersonsData": $('#config\\.storage\\.contactPersonsData').val()
            },
            "logging": {
                "level": $('[name="config\\.logging\\.level"]:checked').data('level').toLowerCase()
            },
            "cronJob": {
                "pattern": $('#config\\.cronJob').val()
            }
        };

        $.ajax({
            url: "/updateConfig", 
            data: JSON.stringify(newConfig), 
            contentType: 'application/json',
            type: 'POST',
            success: (data) => {
                if(data.result.changed) {
                    // Reload page
                    location.reload(); 
                }
            },
            error: (xhr, textStatus, errorThrown) =>{
                console.log(textStatus);
                console.log(errorThrown);
            }
            });
    }

    function displayHooks(hooks) {
        for(var i = 0; i < hooks.length; i++) {
            var hook = hooks[i];
            var hookTemp = `<div class="accordion-item">`+
                `<h2 class="accordion-header" id="heading-${hook.internalId}">`+
                    `<button `+
                        `class="accordion-button collapsed" `+
                        `type="button" `+
                        `data-bs-toggle="collapse" `+
                        `data-bs-target="#collapse-${hook.internalId}" `+
                        `aria-expanded="false" `+
                        `aria-controls="collapse-${hook.internalId}">`+
                        `Hook&nbsp; <span style="font-style: italic; color: #888">${hooks[i].description}</span>`+
                    `</button>`+
                `</h2>`+
                `<div `+
                    `id="collapse-${hook.internalId}" `+
                    `class="accordion-collapse collapse" `+
                    `aria-labelledby="heading-${hook.internalId}">`+
                `<div class="accordion-body">`+
                    `<label `+
                        `for="hook-description-${hook.internalId}" `+
                        `class="form-label" `+
                        `style="font-weight: var(--base-text-weight-semibold, 600);">`+
                        `Description`+
                    `</label>`+
                    `<input `+
                        `type="text" `+
                        `class="form-control form-control-sm" `+
                        `id="hook-description-${hook.internalId}" `+
                        `placeholder="Description" `+
                        `value="${hooks[i].description}" `+
                        `readonly>`+
                    `<label `+
                        `for="hook-url-${hook.internalId}" `+
                        `class="form-label" `+
                        `style="margin-top: 0.6em; font-weight: var(--base-text-weight-semibold, 600);">`+
                        `URL <span style="color: #b50000;">*</span>`+
                    `</label>`+
                    `<input `+
                        `type="text" `+
                        `class="form-control form-control-sm" `+
                        `id="hook-url-${hook.internalId}" `+
                        `placeholder="URL" `+
                        `value="${hooks[i].url}" `+
                        `readonly>`;
            if(hooks[i].hasOwnProperty('delay')) {
                hookTemp += 
                    `<label `+
                        `for="hook-delay-${hook.internalId}" `+
                        `class="form-label" `+
                        `style="margin-top: 0.6em; font-weight: var(--base-text-weight-semibold, 600);">`+
                        `Delay [seconds]`+
                    `</label>`+
                    `<input `+
                        `type="text" `+
                        `class="form-control form-control-sm" `+
                        `id="hook-delay-${hook.internalId}" `+
                        `placeholder="Delay in seconds" `+
                        `value="${hooks[i].delay}" `+
                        `readonly>`;
            }
             hookTemp += 
                    `<label `+
                        `for="hook-last-result-${hook.internalId}" `+
                        `class="form-label" `+
                        `style="margin-top: 0.6em; font-weight: var(--base-text-weight-semibold, 600);">`+
                        `Last Result`+
                    `</label>`+
                    `<input `+
                        `type="text" `+
                        `class="form-control form-control-sm" `+
                        `id="hook-last-result-${hook.internalId}" `+
                        `data-internalid="${hook.internalId}" `+
                        `placeholder="no result yet" readonly>`;
            hookTemp += `</div>`+
                `</div>`+
            `</div>`;
            $('#hooks').append(hookTemp);
        }
        getLastHooksResults();
    }

    function getHooks() {
        $.ajax({
            url: "/hooks", 
            type: 'GET',
            success: (data) => { displayHooks(data); },
            error: (xhr, textStatus, errorThrown) =>{ console.log(textStatus); console.log(errorThrown); }
        });
    }

    var intervalId;
    function checkForHooksResults() {
        $.ajax({
            url: "/hooks/status", 
            type: 'GET',
            success: (data) => { 
                //console.log(data);
                displayHooksResults(data.linearizedHooks);
                if(data.finished == true) { 
                    clearInterval(intervalId);   
                    $('#trigger-hooks-spinner').hide(); 
                    $('#trigger-hooks-button').prop("disabled", false); } 
                },
            error: (xhr, textStatus, errorThrown) => { console.log(textStatus); console.log(errorThrown); }
        });
    }

    function getLastHooksResults() {
        $.ajax({
            url: "/hooks/status", 
            type: 'GET',
            success: (data) => displayHooksResults(data.linearizedHooks),
            error: (xhr, textStatus, errorThrown) => { console.log(textStatus); console.log(errorThrown); }
        });
    }

    function displayHooksResults(data) {
        for(var i = 0; i < data.length; i++) {
            $(`input[data-internalid="${data[i].internalId}"]`).val(data[i].result);
        }
    }

    function showValidationError(id, type) {
        $('#'+id+'-error').empty();
        $('#'+id+'-error').append(i18next.t('validation.'+type));
        $('#'+id+'-error').show();
    }

    function buildLabelAndInputForConfigurationData(id, value, type, parent) {
        var result =
        `<label `+
            //`for="${id}" `+
            `class="form-label" `+
            `style="margin-top: 0.5rem; font-weight: var(--base-text-weight-semibold, 600);" data-i18n="${id}.name">`+
        `</label>`+
        `<input `+
            `type="text" `+
            `class="form-control form-control-sm" `+
            `id="${id}" `+
            `value="${value}" `+
            `data-i18n-id="${id}+'.placeholder'" `;
        result += type === null ? '' : `data-type="${type}" `;
        result += 
            `placeholder="${i18next.t(id+'.placeholder')}" `+ // TODO: language change not possible
            `aria-describedby="basic-addon-${id}">`+
        `<div class="form-text input-error" id="${id}-error" style="display:none;"></div>`+
        `<div class="form-text input-explanation" style="visibility: hidden;" data-i18n="[html]${id}.explanation"><div>`;

        parent.append(result);

        var escapedId = id.replace(/\./g, '\\.');
        $('#'+escapedId).change(function() {
            var idTmp = $(this).attr('id').replace(/\./g, '\\.');
            var currentValue = $( this ).val();
            if(currentValue.trim().length == 0) {
                $( this ).addClass('is-invalid');
                $('#saveConfig').prop("disabled", true);
                return;
            }
            var type = $( this ).data('type');
            if(type != undefined && type != null) {
                if(type == 'url' && !isValidHttpUrl(currentValue)) {
                    $( this ).addClass('is-invalid');
                    $('#saveConfig').prop("disabled", true);

                    showValidationError(idTmp, type);
                    return;
                } else if(type == 'filename' && !isValidFilename(currentValue)) {
                    $( this ).addClass('is-invalid');
                    $('#saveConfig').prop("disabled", true);

                    showValidationError(idTmp, type);
                    return;
                }
            }
            $('#'+idTmp+'-error').hide();
            $( this ).removeClass('is-invalid');
            $('#saveConfig').prop("disabled", false);
        });
    }

    function buildLabelAndInputForCronJob(id, value, parent) {
        var result =
        `<label `+
            //`for="${id}" `+
            `class="form-label" `+
            `style="margin-top: 0.5rem; font-weight: var(--base-text-weight-semibold, 600);" data-i18n="${id}.name">`+
        `</label>`+
        `<div class="input-group input-group-sm">`+
            `<input `+
                `type="text" `+
                `class="form-control" `+
                `id="${id}" `+
                `value="${value}"`+
                `placeholder="${i18next.t(id+'.placeholder')}" `+
                `aria-describedby="basic-addon-${id}">`+
            `<a href="https://github.com/node-cron/node-cron#cron-syntax" target="_blank" class="input-group-text help-input-group" id="basic-addon-${id}" style="text-decoration-line: none;">`+
                `<i class="fa-regular fa-circle-question"></i> <span style="margin-left: 0.5em;" data-i18n="help"></span>`+
            `</a>`+
        `</div>`+
        `<div class="form-text input-explanation" style="visibility: hidden;" data-i18n="[html]${id}.explanation"></div>`+
        //`<input type="text" class="form-control form-control-plaintext" id="${id}-explanation" placeholder="${i18next.t('token_placeholder')}" aria-label="${i18next.t('token_placeholder')}">`;
        `<label class="form-label" id="${id}-explanation"></label>`;

        parent.append(result);
        var escapedId = id.replace(/\./g, '\\.');

        $('#'+escapedId+'-explanation').html(cronstrue.toString($('#'+escapedId).val(), { use24HourTimeFormat: true, locale: i18next.language }));
        $('#'+escapedId).change(function() {
            const id = $(this).attr('id');
            const escapedId = id.replace(/\./g, '\\.');
            $.ajax({
                url: "/validateCronPattern", 
                data: JSON.stringify({ pattern: $('#'+escapedId).val() }), 
                contentType: 'application/json',
                type: 'POST',
                success: (data) => {
                    if(data.valid) {                                
                        $('#'+escapedId).val(data.normalizedPattern);
                        $('#'+escapedId+'-explanation').html(cronstrue.toString($('#'+escapedId).val(), { use24HourTimeFormat: true, locale: i18next.language }));

                        $('#'+escapedId).removeClass('is-invalid');
                        $('#saveConfig').prop("disabled",false);
                    } else {
                        $('#'+escapedId+'-explanation').html(i18next.t(id+'.pattern_invalid'));
                        
                        $('#'+escapedId).addClass('is-invalid');
                        $('#saveConfig').prop("disabled",true);
                    }
                },
                error: (xhr, textStatus, errorThrown) =>{
                    console.log(textStatus);
                    console.log(errorThrown);
                }
            });
        });
    }

    function buildLabelAndCheckBoxForConfigurationData(id, checked, parent) {
        var result =
        `<label `+
            `class="form-label" `+
            `style="margin-top: 0.5rem; font-weight: var(--base-text-weight-semibold, 600);" data-i18n="${id}.name">`+
        `</label>`+
        `<div class="form-check form-switch">`+
            `<input `+
                `type="checkbox" `+
                `role="switch" `+
                `class="form-check-input " `+
                `id="${id}" `+
                `${ checked ? 'checked' : '' }>`+
            `<label class="form-check-label" for="${id}" id="${id}-label" data-i18n="${id}.active"></label>`+ 
        `</div>`+
        `<div class="form-text input-explanation" style="visibility: hidden;" data-i18n="[html]${id}.explanation"><div>`;

        parent.append(result);
        var escapedId = id.replace(/\./g, '\\.');
        $('#'+escapedId).change(function() {
            var id = $(this).attr('id');
            var escapedId = id.replace(/\./g, '\\.');
            if($("#"+escapedId).is(':checked')) {
                $('#'+escapedId+'-label').html(i18next.t(id+'.active'));
            } else {
                $('#'+escapedId+'-label').html(i18next.t(id+'.inactive'));
            }
        });
    }

    function buildLabelAndRadiosForConfigurationData(id, options) {
        var result =
        `<label `+
            `class="form-label" `+
            `style="margin-top: 0.5rem; font-weight: var(--base-text-weight-semibold, 600);" data-i18n="${id}">`+
        `</label>`;
        for(var i = 0; i < options.length; i++) {
            result +=
            `<div class="form-check">`+
                `<input class="form-check-input" type="radio" data-level="${options[i].name}" name="${id}" id="${id}.${(i+1)}" ${options[i].selected ? 'checked' : ''}>`+
                `<label class="form-check-label" for="${id}.${(i+1)}">`+
                    `<span>${options[i].name}</span> <span style="color:#777; margin-left: 0.5em;" data-i18n="${options[i].description}"></span>`+
                `</label>`+
            `</div>`;
        }
        return result;
    }

    function getStatus() {
        $.get("/status")
            .done(function (data) {
                $('#files').empty();
                data.files.forEach(file => {
                    var lastChangeDate;
                    if(file.exists == false) {
                        file.stats = {};
                        file.stats.mtime = '-'
                        file.stats.size = 0;
                        lastChangeDate = '-';
                    } else {
                        lastChangeDate = moment(file.stats.mtime, 'YYYY-MM-DDTHH:mm:ss.SSSZ').format('DD.MM.YYYY HH:mm:ss');
                    }

                    var entryTmp = 
                    `<div class="card" style="margin-bottom:1em; margin-right: 1em;">`+
                        `<h5 class="card-header">${getIconForMimeType(file.mimeType)} ${file.filename}</h5>`+
                        `<div class="card-body">`+
                            `<!--<h5 class="card-title">${file.filename}</h5>-->`+
                            `<p class="card-text"><span data-i18n="lastChangeDate"></span>: ${lastChangeDate}</p>`+
                            `<p class="card-text">${formatBytes(file.stats.size)}</p>`+
                            `<a href="#" class="btn btn-sm ${file.exists == false ? 'btn-outline-secondary' : 'btn-primary'} ${file.exists == true ? '': 'disabled'} view-file-button" data-filename="${file.filename}"><span data-i18n="view_file"></span> <i class="fa-regular fa-eye"></i></a>`+
                        `</div>`+
                    `</div>`;
                    $('#files').append(entryTmp);
                    
                });
                $('.view-file-button').click(function(event) {
                    var filename = $(this).data('filename');
                     $.get("/file?filename="+filename)
                        .done(function (file) {
                            var content = file.content;
                            if(filename.endsWith('json')) {
                                content = JSON.stringify(JSON.parse(content), null, 4);
                            }
                            $('#fileContentModalLabel').empty();
                            $('#fileContentModalLabel').append(filename);
                            $('#fileContentModalBody').empty();
                            $('#fileContentModalBody').append("<pre>"+content+"</pre>");
                            $('#fileContentModal').modal('show');
                        })
                        .fail(function (error) {
                            console.log(error);
                        });
                });

                $('#config-test').empty();
                var parentTmp = $('#config-test');
                buildLabelAndInputForConfigurationData('config.churchtools.url', data.config.churchtools.url, 'url', parentTmp);
                buildLabelAndInputForConfigurationData('config.churchtools.username', data.config.churchtools.username, null, parentTmp);
                buildLabelAndInputForConfigurationData('config.churchtools.password', '', null, parentTmp);
                buildLabelAndInputForConfigurationData('config.storage.groupsData', data.config.storage.groupsData, 'filename', parentTmp);
                buildLabelAndInputForConfigurationData('config.storage.contactPersonsData', data.config.storage.contactPersonsData, 'filename', parentTmp);

                buildLabelAndCheckBoxForConfigurationData('config.storage.json', data.config.storage.mimeTypes.includes('application/json'), $('#config-test'));
                
                $('#config-test').append(buildLabelAndRadiosForConfigurationData('config.logging.level', [
                    { name: 'Debug', description: 'config.logging.debug', selected: data.config.logging.level == 'debug' },
                    { name: 'Info',  description: 'config.logging.info',  selected: data.config.logging.level == 'info' },
                    { name: 'Error', description: 'config.logging.error', selected: data.config.logging.level == 'error' },
                    { name: 'None',  description: 'config.logging.none',  selected: data.config.logging.level == 'none' },
                ]));
                    
                buildLabelAndInputForCronJob('config.cronJob', data.config.cronJob.pattern, $('#config-test'));

                $('#display-explanation-button').click(() => {
                    if($('#display-explanation-button').hasClass('active')) {
                        $('.input-explanation').css('visibility', 'inherit');
                    } else {
                        $('.input-explanation').css('visibility', 'hidden');
                    }
                });

                i18next.changeLanguage("de", () => {
                    rerender();
                });
            })
            .fail(function (error) {
                console.log(error);
            });
    }

    function refreshFiles() {
        $('#refresh-files-button').prop("disabled", true);
        $('#refresh-files-spinner').show();
        $.post("/store")
            .done(function () {
                getStatus();
            })
            .fail(function (error) {
                console.log(error);
            })
            .always(function() {
                $('#refresh-files-spinner').hide();
                $('#refresh-files-button').prop("disabled",false);
            });
    }

    /**
     * Trigger hooks
     */
    function triggerHooks() {
        $('#trigger-hooks-button').prop("disabled", true);
        $('#trigger-hooks-spinner').show();
        $.post("/hooks")
            .done((data) => { intervalId = setInterval(checkForHooksResults, 5000); })
            .fail((xhr, textStatus, errorThrown) => { console.log(textStatus); console.log(errorThrown); });
    }

    $(document).ready(function () {
        $('#refresh-files-button').click(refreshFiles);
        $('#trigger-hooks-button').click(triggerHooks);
        $('#refresh-button').click(getStatus);
        $('#saveConfig').click(saveConfig);

        getStatus();
        getHooks();
    });
</script>
