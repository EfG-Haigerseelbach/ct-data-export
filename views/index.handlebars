<nav class="navbar navbar-expand-lg bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">ChurchTools Data Export</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="nav navbar-right" id="navbarSupportedContent" role="search">
            <form class="d-flex" action="/logout" method="POST">
                <button class="btn btn-outline-success" type="submit"><i class="fa-solid fa-arrow-right-from-bracket"></i> Logout</button>
            </form>
        </div>
    </div>
</nav>

<style>
    #refresh-files {
        transition: transform .7s ease-in-out;
    }
    #refresh-files:hover {
        transform: rotate(360deg);
    }
    .loader {
        width: 48px;
        height: 48px;
        border: 5px solid rgb(77, 77, 77);
        border-bottom-color: transparent;
        border-radius: 50%;
        display: inline-block;
        box-sizing: border-box;
        animation: rotation 1s linear infinite;
        }

        @keyframes rotation {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    } 
</style>

<div class="container">
    <h3 style="margin-top: 3rem;">Dashboard</h3>
    <h4 style="margin-top: 2rem;">Files <i class="fa-solid fa-arrows-rotate" id="refresh-files"></i></h4>
    <div class="list-group" id="files-list">
    </div>

    <h4 style="margin-top: 2rem;">Configuration</h4>
    <table class="table table-sm table-hover table-striped">
      <thead>
    <tr>
      <th scope="col">Key</th>
      <th scope="col">Value</th>
    </tr>
  </thead>
  <tbody id="config-table-body">
  </tbody>

  </table>
    </div>
</div>
<script>
    function formatBytes(bytes, decimals = 2) {
        if (bytes === 0) return '0 Bytes';

        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

        const i = Math.floor(Math.log(bytes) / Math.log(k));

        return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }
    function getIconForMimeType(mimeType) {
        if(mimeType == "text/csv") {
            return '<i class="fa-solid fa-file-csv"></i>';
        } else {
            return '<i class="fa-solid fa-file"></i>';
        }
    }

    function cronJobPatternToString(pattern) {

    }


    var allowedCalendarIds = [];

    function getCalendarIdsAndNames() {
        $.get("/getCalendars")
            .done(function (data) {
                var calendarIdsAndNames = data;
                var calendarCheckBoxTemplate = '<div class="form-group"><input class="form-check-input" type="checkbox" id="##ID##" ##CHECKED##><label class="form-check-label" for="##ID##">##LABEL##</label></div>';
                
                var tmp = '';
                calendarIdsAndNames.forEach(calendarIdAndName => {
                    var checkboxTmp = calendarCheckBoxTemplate
                        .replace(/##ID##/g, calendarIdAndName.id)
                        .replace(/##LABEL##/g, calendarIdAndName.name);
                    var selected = false;
                    allowedCalendarIds.forEach(entry => {
                        if(entry.id == calendarIdAndName.id) {
                            selected = true;
                        }
                    });
                    if(selected) {
                        checkboxTmp = checkboxTmp.replace('##CHECKED##','checked="checked"');
                    } else {
                        checkboxTmp = checkboxTmp.replace('##CHECKED##','');
                    }
                    tmp += checkboxTmp;
                });
                $('#calendarIds').empty();
                $('#calendarIds').append(tmp);
            })
            .fail(function (error) {
                console.log(error);
            });
    }

    var groupExportTag;
    var personExportTag;

    function getTagIdsAndNames() {
        $.get("/getTags")
            .done(function (data) {
                var tagIdsAndNames = data;
                var tagRadioButtonTemplate = '<div class="form-group"><input class="form-check-input" type="radio" id="##ID##" ##CHECKED##><label class="form-check-label" for="##ID##">##LABEL##</label></div>';
                
                var tmpPersons = '';
                var tmpGroups = '';
                tagIdsAndNames.forEach(tagIdAndName => {
                    var radioButtonPersonsTmp = tagRadioButtonTemplate
                        .replace(/##ID##/g, tagIdAndName.id)
                        .replace(/##LABEL##/g, tagIdAndName.name);
                    var radioButtonGroupsTmp = tagRadioButtonTemplate
                        .replace(/##ID##/g, tagIdAndName.id)
                        .replace(/##LABEL##/g, tagIdAndName.name);

                    if(personExportTag == tagIdAndName.name) {
                        radioButtonPersonsTmp = radioButtonPersonsTmp.replace('##CHECKED##','checked="checked"');
                    } else {
                        radioButtonPersonsTmp = radioButtonPersonsTmp.replace('##CHECKED##','');
                    }
                    if(groupExportTag == tagIdAndName.name) {
                        radioButtonGroupsTmp = radioButtonGroupsTmp.replace('##CHECKED##','checked="checked"');
                    } else {
                        radioButtonGroupsTmp = radioButtonGroupsTmp.replace('##CHECKED##','');
                    }
                    tmpPersons += radioButtonPersonsTmp;
                    tmpGroups += radioButtonGroupsTmp;
                });

                $('#tagForPersonsToExport').empty();
                $('#tagForPersonsToExport').append(tmpPersons);

                $('#tagForGroupsToExport').empty();
                $('#tagForGroupsToExport').append(tmpGroups);
            })
            .fail(function (error) {
                console.log(error);
            });
    }

    $(document).ready(function () {
        $('#refresh-files').click(function() {
            $.get("/store")
            .done(function () {
                location.reload();
            })
            .fail(function (error) {
                console.log(error);
            });
        });

        getCalendarIdsAndNames();
        getTagIdsAndNames();

        $.get("/status")
            .done(function (data) {
                data.files.forEach(file => {
                    var entryTmp = `<a href="#" class="list-group-item list-group-item-action">`+
                                   `    <div class="d-flex w-100 justify-content-between">`+
                                   `        <h5 class="mb-1">${file.filename}</h5>`+
                                   `        <small>${file.stats.mtime}</small>`+
                                   `    </div>`+
                                   `    <p class="mb-1">Some placeholder content in a paragraph.</p>`+
                                   `    <small>${formatBytes(file.stats.size)}</small><small style="margin-left:1em;">${getIconForMimeType(file.mimeType)}</small>`+
                                   `</a>`;
                    $('#files-list').append(entryTmp);
                });

                var inputRowTemplate = `<tr><td>##key##</td><td><div class="input-group input-group-sm input-inline"><input id="##id##" type="text" class="form-control" value="##value##"></div></td></tr>`;
                
                $('#config-table-body').append(inputRowTemplate
                    .replace('##key##','ChurchTools URL')
                    .replace('##id##','churchtools-url')
                    .replace('##value##',data.config.churchtools.url));

                $('#config-table-body').append(inputRowTemplate
                    .replace('##key##','ChurchTools API user')
                    .replace('##id##','churchtools-username')
                    .replace('##value##',data.config.churchtools.username));

                $('#config-table-body').append(`<tr><td>ChurchTools API password</td><td><div class="input-group input-group-sm input-inline"><input id="churchtools-password" type="password" class="form-control" placeholder="Enter the new password here"></div></td></tr>`);

                $('#config-table-body').append(inputRowTemplate
                    .replace('##key##','Path to store exported data')
                    .replace('##id##','storage-path')
                    .replace('##value##',data.config.storage.path));

                $('#config-table-body').append(inputRowTemplate
                    .replace('##key##','Filename for data of Groups (w/o extension)')
                    .replace('##id##','storage-groupsData')
                    .replace('##value##',data.config.storage.groupsData));

                $('#config-table-body').append(inputRowTemplate
                    .replace('##key##','Filename for data of Persons (w/o extension)')
                    .replace('##id##','storage-contactPersonsData')
                    .replace('##value##',data.config.storage.contactPersonsData));

                $('#config-table-body').append(inputRowTemplate
                    .replace('##key##','Filename for data of Appointments (w/o extension)')
                    .replace('##id##','storage-appointmentData')
                    .replace('##value##',data.config.storage.appointmentData));

                var tmp = '';
                if(data.config.storage.mimeTypes.includes('text/csv')) {
                    tmp = 'checked="checked"';
                }
                var rowTmp = `<tr><td>Output as CSV file ('text/csv')</td><td><input class="form-check-input" type="checkbox" id="outputCsvCheckBox" ${tmp}></td></tr>`;
                $('#config-table-body').append(rowTmp);
                
                tmp = '';
                if(data.config.storage.mimeTypes.includes('application/json')) {
                    tmp = 'checked="checked"';
                }
                rowTmp = `<tr><td>Output as JSON file ('application/json')</td><td><input class="form-check-input" type="checkbox" id="outputJsonCheckBox" ${tmp}></td></tr>`;
                $('#config-table-body').append(rowTmp);
                
                allowedCalendarIds = data.config.calendar.allowedCalendarIds;

                rowTmp = `<tr><td>Calendar IDs</td><td id="calendarIds"><span class="loader"></span></td></tr>`;
                $('#config-table-body').append(rowTmp);

                groupExportTag = data.config.tags.groupsToExport;
                $('#config-table-body').append('<tr><td>Tag for Groups to Export</td><td id="tagForGroupsToExport"><span class="loader"></span></td></tr>');

                personExportTag = data.config.tags.personsToExport;
                $('#config-table-body').append('<tr><td>Tag for Persons to Export</td><td id="tagForPersonsToExport"><span class="loader"></span></td></tr>');


                var rowTmp = '<tr><td>Log Level</td><td><select class="custom-select" id="logLevelSelect">'+
                    `<option value="LOG_LEVEL_DEBUG" ${data.config.logging.level == 'LOG_LEVEL_DEBUG' ? 'selected' : ''}>Debug</option>`+
                    `<option value="LOG_LEVEL_INFO" ${data.config.logging.level == 'LOG_LEVEL_INFO' ? 'selected' : ''}>Info</option>`+
                    `<option value="LOG_LEVEL_ERROR" ${data.config.logging.level == 'LOG_LEVEL_ERROR' ? 'selected' : ''}>Error</option>`+
                    `<option value="LOG_LEVEL_NONE" ${data.config.logging.level == 'LOG_LEVEL_NONE' ? 'selected' : ''}>None</option>`+
                    `</select></td></tr>`;
                
                $('#config-table-body').append(rowTmp);

                $('#config-table-body').append(`<tr><td>Cron Job</td><td><div class="input-group input-group-sm input-inline">`+
                    `<input id="cronJob-pattern" type="text" class="form-control" value="${data.config.cronJob.pattern}">`+
                    `<div class="input-group-append"><a href="https://github.com/node-cron/node-cron#cron-syntax" target="_blank" class="btn btn-outline-secondary" >Help</a></div></div></td></tr>`);

                console.log(data);
            })
            .fail(function (error) {
                console.log(error);
            });
    });
</script>