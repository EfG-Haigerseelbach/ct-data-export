#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs');
var debug = require('debug')('new-folder:server');
var http = require('http');
const config = require('config');

const configInfo = config.get('info');
console.log(configInfo);

/**
 * Check if the configuration is valid.
 */
var { JSONError, Draft07 } = require ('json-schema-library');
var configSchema = require('../config/configSchema.json');

const configJsonSchema = new Draft07(configSchema);
var errors = configJsonSchema.validate(config);

function keepLogging() {
  setTimeout(() => {
      console.log('The configuration is erroneous. Please correct it and restart the application.');
      console.error(errors);
      keepLogging();
  }, 360000)
}

if(errors != undefined && errors.length > 0) {
  // The configuration is not valid.
  console.log('The configuration is erroneous. Please correct it and restart the application.');
  console.error(errors);
  // Start an endless loop. This is required for monitoring tools like pm2 to prevent a restart with (the same)
  // erroneous configuration.
  keepLogging();

} else {
  /**
   * Get port from environment and store in Express.
   */
  var app = require('../app');
  var port = normalizePort(process.env.PORT || '20228');
  app.set('port', port);


  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);


  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
  debug('Listening on ' + bind);
}